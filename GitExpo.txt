select case when left(numb,1)='-' then replace(
                                                case when right(numb,1)=0 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1),0,'}')
													 when right(numb,1)=1 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1),1,'j')
													 when right(numb,1)=2 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1),2,'K')
								                     when right(numb,1)=3 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1),3,'L')
								                     when right(numb,1)=4 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1),4,'M')
								                     when right(numb,1)=5 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1),5,'N')
								                     when right(numb,1)=6 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1),6,'O')
								                     when right(numb,1)=7 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1), 7, 'p')
								                     when right(numb,1)=8 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1),8,'Q')
								                     when right(numb,1)=9 then LEFT(numb, Len(numb)-1) + Replace(RIGHT(numb, 1),9,'R')
													 end,'-',0)
							
												 else numb end from nums
												 
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++
1.Execute sql task:(Create temp table - ##PostDates_PV_DEP_TRAN_DAILY)
IF OBJECT_ID('tempdb..##PostDates_PV_DEP_TRAN_DAILY') IS NOT NULL
 DROP TABLE ##PostDates_PV_DEP_TRAN_DAILY
 
CREATE TABLE ##PostDates_PV_DEP_TRAN_DAILY
    (
 TableName varchar(500) default 'PV_DEP_TRAN_DAILY'
        ,[PostDate] date
    )
connection manager:SNL_Prod
--===================================================
2.dataflow task:(Poulate ##PostDates_PV_DEP_TRAN_DAILY)

a.Oledb source:select DISTINCT POST_DATE from INFORMENT.PV_DEP_TRAN_DAILY
order by POST_DATE
connection manager:odssource
b.oledb destination:snl_prod
                    table name or variable name
                    user::DateTempTable

--=========================================================
3.execute sql task(Insert new rows to ODS_Historical_Data_Load if needed):
COM:SNL_prod

insert into DWReporting.dbo.ODS_Historical_Data_Load(TableName,PostDate)

select  TableName, PostDate from ##PostDates_PV_DEP_TRAN_DAILY temp
where not exists (
 select 1 from DWReporting.dbo.ODS_Historical_Data_Load t1
 where t1.TableName = temp.TableName
 and t1.PostDate = temp.PostDate
)
order by temp.PostDate

--==========================================================
4.Execute sql task:(Get List of dates to be processed)
com:snl_prod
 
select convert(varchar(10),PostDate) from ODS_Historical_Data_Load
where TableName = ?
and IsProcessed = 0
order by PostDate

parameter mapping:User::TableName Input 0 -1
ResultSet 0 User::DatesToProcess
--====================================================
5.Foreach loop:
A.Execute sql task:(Delete records for the date being processed)
com:snl_prod

delete from DWReporting.INFORMENT.PV_DEP_TRAN_DAILY 
where POST_DATE = ?

parameter mapping:User::DateBeingProcessed  input  varchar 0 -1

       *****
B.DataFlow task:(Load destination)
oledb source:
com:ods_source
Sql command form variable

select *
from INFORMENT.PV_DEP_TRAN_DAILY where POST_DATE = '2019-04-04 '

oledb destinatio
com:snl_prod
table:informent.pv_dep_tran_daily

--===============================================
6.Execute sql task:(Update IsProcessed Flag and ProcessedDateTime)
com:snl_prod

update h
set IsProcessed = 1
,ProcessedDateTime = getdate()
from ODS_Historical_Data_Load h
where PostDate = ?
and TableName = ?

parameter mapping:
User::DateBeingPricessed Input varchar 0 -1
User::TableName Input Varchar 1 -1

--============================================

Variables:name | scope|data type|Value |Expression
DateBeingProcessed|PV_DEP_Tran_daily|string |2019-04-04
DatesToProcess|PV_DEP_Tran_daily|object|system.Object
DateTempTable|PV_DEP_Tran_daily|string|##PostDates_PV_DEP_TRAN_DAILY
SourceDataQuery|PV_DEP_Tran_daily|string|"select *
from INFORMENT.PV_DEP_TRAN_DAILY where POST_DATE = '"+ @[User::DateBeingProcessed] +" '"
TableName|PV_DEP_Tran_daily|string|PV_DEP_Tran_daily
--=========================================
5/14/19
Subject: RE: Bug 1759059 : SNLBanker Non-Critical Failure | Sunflower Bank | 08207998 
 
Status: The job is finished successfully and below are details for it. 

Error Type : Database backup failed 

Error Description : Un availability of drive space 

Resolution Steps : Deleted old backup file and set backup files to keep for 2 days. 

Could this bug impact other clients on this core? no 

Could this bug impact any other clients? no 

--=========================================================
just want to let you know I added these couple tables to “Adhoc Package”. 
: Let me know in case fields are added after wards for table which we already loading. In this case, we need to recreate respective SourceData table.

1. Check if underlying table (all columns) is being populated by ETL in PROD
2. Check max post date in Replica Prod. Import any data after that max date from ODS to Replica Prod. Deploy package if not in Prod yet.
3. Generate create script for the stored procedure from DEV and execute in PROD (For Ongoing data)
4. Create a step in "Ongoing_ODS_Data_Load" in Prod.
Kevin, as per our conversation this morning, these are the tables that we want to be moved to 3AM load that hopefully will resolve some of the validation failed items. 

Also, it probably will help, if we move these master/cross-ref tables as well, if we can-

Hi TJ & Ryan – the table that we would like to get promoted to the Prod ETL as soon as possible is: LNP00101
 
That table is a single row that changes daily, but contains date columns that are used on many other ODS tables. If we could get that added to the Prod ETL as soon as possible it would allow us to start verifying some of our production ready ODS replica views. 
 
Appreciate the help. Let me know if any questions.
will work on this today.
For your information, We are not using both the table at SNL data warehouse. Both table were added add Load AdHoc Table SSIS package.

Let me know if you need more details.
 It’s also the existing table with missing columns. 


I think we need to escalate this. Here is what we know:

Using the same credentials:
Aruna & Manoj can pull the 4 fields
Parag can not pull the fields

If the statements above are not correct, please speak up. To help us make sure we are talking about the same thing, please respond to this email with the user id you have tried to connect with.

If we are using the same id, then we will need try deleting the meta data and reading on the SNL side to see if we can get the 4 fields to come up.
If we are not using the same id, then we will need to escalate to Fiserv on the access issue.
I was wondering if you guys have any update regarding the 4 columns. 
OK.  Thanks for the heads up.
Okay, can you get me those tables that are impacted and we’ll see how long the full load takes (all columns) for each table? We could put those as the first step in our job and run them at 3AM, assuming they don’t take too long, we would then run the rest of our SNLBanker job and then the last package would be the rest of the non time sensitive tables.

Here’s what I’m thinking, but I still need to confirm timing:
1.	Live table load at 3AM (Sunflower/Contractors could own this)
2.	~5AM SNLBanker load through to cubes (SNLBanker owns this)
3.	~7 AM rest of tables needed for downstream reporting / processes (Sunflower/ Contractor will own this)

Keep in mind that if more tables are added to the live load (Step 1) that the SNLBanker solution could be delayed.
I’m confident we can find a solution.

Speaking theoretically, the data we are pulling is still accurate as to when we pull it, but it just isn’t in agreement with what ODS pulled earlier in the day – Right?
Is tying to the ODS for the transaction counts / balances the requirement from a business perspective? 
Sorry if that’s an old wound – just want to make sure before we get into the weeds.
Today I have checked those two tables and those were not added at “Data Load 4” Data flow. 

I have added those table today at “Data Load 4” at “Load AdHoc Core Table.dtsx” package. 
I verified it now at “Load AdHoc Core Table.dtsx” package and didn’t find duplicate table. 

Could you please confirm package name where you made changes as I didn’t get duplicate two table ?
Please make sure Hyperion queries will work in SQL Server environment (which I doubt) before going down that route. Hyperion queries looks like PL/SQL. Might be better off going with Oracle db if they want to go that way. 
Looks like we have these options to bring database objects and data from Oracle to SQL Server- 
1.	Script out database objects and “insert” statements from oracle and run it in SQL Server – This option requires some manual editing of script to make it compatible to SQL Server T-SQL. 
2.	 SSIS – Create dataflow task for each table to be imported but this will be troublesome and time consuming.
3.	SQL Server Data Import Wizard – This options seems better than SSIS as you can just pick tables from the list (we can pick all) and the wizard will do the job (in the backend its actually creating SSIS package)
4.	Use SSMA (OracleToSQL)– I think this tool will be best thing to do this job. Looks like we can create a project, do the mapping and click some buttons to do our migration https://docs.microsoft.com/en-us/sql/ssma/oracle/getting-started-with-ssma-for-oracle-oracletosql?view=sql-server-2017

If so, great – there’s a few ways to accomplish this but first I’d like to get some more info on job times from my team.
Hi Christopher – thanks for doing some research on this. It is sounding like we will need to break this out into its own ETL and have it run as soon as PCOMB is done. Lets discuss in our call today.
We are tasked with importing all database objects and data from ODS to in-house SQL server instance. We are told that ODS is an oracle database. So, we are looking for a server name or IP / db name / connection credentials so that we could put that into tool like SSIS or SQL Server Data Import Wizard and copy those oracle objects and data to SQL server. 

Can you please us with that?
I’m going to send out an email to everyone to see if we can get assistance.

I have project estimation ready for you guys to look at. Please find attached spreadsheet. 

Also I have created all tables (just the table definition; no data) in SQL Server (SAL-SNL-DEV) . 

Looks like all the tables in ODS are column to column mapping from signature tables. There is no aggregation or summary happening there. We do have a mappings for most of the fields in the mapping documents provided to us but are missing few, which we will deal with as the project progresses. 

To build an ETL pipe line project, I have estimated 12.73 weeks with 2 full time resources. Estimation is based on how many columns each tables has. My estimation is 3 minutes per column. 

Please let me know if you have any questions. 
We would need couple of these things done ASAP, in the meantime. 

1.	Connection to signature from Plano be fixed
2.	Have someone prioritize these tables into High, Medium and Low category. Tables that are used by most reports and master tables should probably be in High Priority. We will start with High Priority tables first. 
Hi Manoj – thank you very much for following up with me. I honestly thought I had send those over, but I had not. Just sent an email to TJ. Hopefully we will hear back early next week. 
Hi Kevin, did you get chance to get with TJ on this yet?
--===============================================================================

/***************************
File Name  : fn_ISODate_SQL.sql
Created by : 
Created Date:
Description :  Date conversion function using general 2049 rule. Use for most dates from DB2 

****************************/


create FUNCTION [SourceData].[fn_ISODate_SQL]
	( @UNIX_TIME VARCHAR(10) )
RETURNS  DATETIME
AS
BEGIN

	IF LEN(@UNIX_TIME) >= 5
	BEGIN
	DECLARE @bad_date	VARCHAR(6)
	DECLARE @month		VARCHAR(2)
	DECLARE @day		VARCHAR(2)
	DECLARE @year		VARCHAR(4)
	DECLARE @outputvalue DATETIME
	DECLARE @sql_date	VARCHAR(20)

	SET  @bad_date = @UNIX_TIME

	--format the date parts and let SQL covert to date using 2049 rule
	SET @bad_date = RIGHT('000000' + @bad_date, 6)
	SET @month = SUBSTRING(@bad_date, 1, 2)
	SET @day = SUBSTRING(@bad_date, 3, 2)
	SET @year = SUBSTRING(@bad_date, 5, 2)
	SET @sql_date = @month + '/' + @day + '/' + @year

	-- validate the date value
	  IF (ISDATE(@sql_date) =1)
	  BEGIN
			SET @outputvalue =  cast(@sql_date AS DATETIME)
	  END
	  ELSE
	  BEGIN
			SET @outputvalue = NULL
	  END
	
	END
	ELSE 
	BEGIN
		SET @outputvalue = NULL
	END

	RETURN  @outputvalue	

END




GO
--=======================================================

/***************************
File Name  : fn_JulianDate_SQL.sql
Created by : 
Created Date:
Description :   Date conversion function converting Julian Date. Use for most dates from DB2

****************************/


CREATE  FUNCTION [SourceData].[fn_JulianDate_SQL]( @JulianDate INT )
RETURNS  DATETIME
AS

BEGIN
	DECLARE @OUTPUTVALUE DATETIME

	IF @JulianDate = 0
	BEGIN 
		SET @outputvalue = NULL
	END
	ELSE
	BEGIN
		IF LEFT(@JulianDate,4) < 1800
		BEGIN
			SET @outputvalue = NULL
		END
		ELSE
		BEGIN
			SET @OUTPUTVALUE = (SELECT CONVERT(DATE,DATEADD(day, CAST(RIGHT(@JulianDate,3) AS int) - 1, 
            CONVERT(datetime, LEFT(@JulianDate,4) + '0101', 112))))
		END
	END

	RETURN  @outputvalue	

END





GO
--=============================================
/***************************
File Name  : fn_JulianDate_SQL.sql
Created by : 
Created Date:
Description :   Date conversion function converting Julian Date. Use for most dates from DB2

****************************/


CREATE  FUNCTION [SourceData].[fn_MDDYYYYDate_SQL]( @MDDYYYYDate INT )
RETURNS  DATETIME
AS

BEGIN
DECLARE @outputvalue DATETIME

	IF @MDDYYYYDate = 0
	BEGIN 
		SET @outputvalue = NULL
	END
	ELSE
	BEGIN
		DECLARE @MMDDYYYY varchar(8)
		SELECT @MMDDYYYY = RIGHT('0' + CAST(@MDDYYYYDate as varchar(255)),8)  
		SET @outputvalue = CAST(SUBSTRING(@MMDDYYYY,1,2) + '/'+SUBSTRING(@MMDDYYYY,3,2) + '/'+SUBSTRING(@MMDDYYYY,5,4) as date)	
	END
	
	RETURN  @outputvalue

END

--===================================================================

create function [dbo].[fn_NumberToTime] (@InputVal numeric(6,0))
returns datetime
as
/******************************************************************************************

Description: returns time

****************
Change History
****************
Date			Author				Description 
--------		-------------		------------------------------------
04/10/2019		Manoj Bhandari		Initial Version

*******************************************************************************************/
begin
	declare @OutputValue varchar(20)
	set @OutputValue = RIGHT(replicate ('0',6) + convert(varchar(10),@InputVal), 6)
	set @OutputValue = left(@OutputValue,2) + ':'+ SUBSTRING(@OutputValue,3,2) + ':' + right(@OutputValue,2)
	return convert(datetime,@OutputValue)
end
GO
--==================================================================================

create function [dbo].[fn_PadZeroToCertainDigit] (@InputStr varchar(200), @PadLength int)
returns varchar(200)
as
/******************************************************************************************

Description: returns 10 digit account Number

****************
Change History
****************
Date			Author				Description 
--------		-------------		------------------------------------
01/28/2019		Manoj Bhandari		Initial Version

*******************************************************************************************/
begin

declare @OutputValue varchar(200)
set @OutputValue = RIGHT(replicate ('0',@PadLength) + @InputStr, @PadLength)
return @OutputValue

end
GO
--===========================================================================
create function [dbo].[fn_NumberToPhoneFormat] (@InputVal numeric(20,0))
returns varchar(20)
as
/******************************************************************************************

Description: returns time

****************
Change History
****************
Date			Author				Description 
--------		-------------		------------------------------------
04/10/2019		Manoj Bhandari		Initial Version

*******************************************************************************************/
begin
	declare @OutputValue varchar(20)
	declare @InputValStr varchar(20)
	set @InputValStr = convert(varchar(20),@InputVal)
	if len(@InputValStr)=10 
		set @OutputValue = left(@InputValStr,3) + '-'+ SUBSTRING(@InputValStr,4,3) + '-' + right(@InputValStr,4)	
	else 
		set @OutputValue = @InputValStr	
	return isnull(nullif(@OutputValue,'0'),'')
end
GO
--=======================================================
CREATE PROCEDURE [dbo].[LoadForecasting] 
	
AS
BEGIN

set nocount on

BEGIN TRY

	/****** Object:  Index [IX_ForecastProductCashFlows_Product]    Script Date: 11/17/2015 6:18:34 PM ******/
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastProductCashFlows]') AND name = N'IX_ForecastProductCashFlows_Product')
	DROP INDEX [IX_ForecastProductCashFlows_Product] ON [dbo].[ForecastProductCashFlows] WITH ( ONLINE = OFF )
	--GO
	/****** Object:  Index [IX_ForecastProductCashFlows_Branch]    Script Date: 11/17/2015 6:19:38 PM ******/
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastProductCashFlows]') AND name = N'IX_ForecastProductCashFlows_Branch')
	DROP INDEX [IX_ForecastProductCashFlows_Branch] ON [dbo].[ForecastProductCashFlows]
	--GO
	/****** Object:  Index [IX_ForecastProductCashFlows_Region]    Script Date: 11/17/2015 6:20:04 PM ******/
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastProductCashFlows]') AND name = N'IX_ForecastProductCashFlows_Region')
	DROP INDEX [IX_ForecastProductCashFlows_Region] ON [dbo].[ForecastProductCashFlows]
	--GO
	/****** Object:  Table [dbo].[ForecastProductCashFlows]    Script Date: 11/17/2015 4:54:22 PM ******/
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ForecastProductCashFlows]') AND type in (N'U'))
	DROP TABLE [dbo].[ForecastProductCashFlows]
	--GO

	/* Pre-populate ForecastProductCashFlows. THIS TABLE MUST BE KEPT UP-TO-DATE WITH THE NIGHTLY ETL!!! */
	SELECT 
		acct.AccountNumber
		,products.ProductKey
		,products.ProductCode
		,products.Product
		,loans.OriginalLoanAmount
		,loans.currentbalance AS Balance	
		,loans.currentbalance AS CurrentBalance
		,loans.LoanInterestRate
		,loans.NextPaymentAmount 
		,[BookBalance]
		,[BankOwnedPercentage]
		,[LoanToValueRatio]
		,[LastPayment]
		,[LineBalance]
		,[TotalCollateralValue]
		,[TotalParticipationBalance]
		,[TotalParticipationPercent]
		,[TotalCommitment]
		,[AdjustedNoteRate]
		,[NonAccrualBalance]
		,[TotalAmountPastDue]
		,[YTDAggregateBalance]
		,[YTDAverageBalance]
		,[YesterdayBalance]
		,[ClosingBalance]
		,acctCommon.RateIndexCode  
		,CAST(ISNULL(acct.FixedRateFlag, 0) AS bit)	AS IsFixedRate
		,loans.CeilingInterestRate				
		,loans.FloorInterestRate					
		,loans.RateVariance	  
		,dt.FullDate AS Date_Last_Updated	 
		,org.RegionCode
		,org.BranchCode
		,org.BankCode
		,org.OrganizationKey
		,products.ProductTypeCode
		,loans.ProcessingDateKey
		,loans.OpenedDateKey
		,loans.MaturityDateKey
		,loans.NextRateChangeDateKey
		,acct.RateChangeFrequencyCode
		,acct.RateChangeFrequency
		,acctCommon.RateIndex
		,dt.DateMonth
		,dt.DateYear
		,dtO.fulldate as EnteredDate
		,matdate.FullDate as MaturityDate
		,rateDate.FullDate as Next_Rate_Change_Date
		,rateindex.RateIndexKey
		,rateFreq.RateChangeFrequencyKey
	INTO dbo.ForecastProductCashFlows
	FROM dbo.dimProduct AS products
	INNER JOIN dbo.factLoans AS loans ON products.ProductKey = loans.ProductKey
	INNER JOIN dbo.dimAccountLoan acct ON loans.AccountLoanKey = acct.AccountLoanKey
	INNER JOIN dbo.dimAccountCommon acctCommon ON acct.AccountCommonKey = acctCommon.AccountCommonKey
	INNER JOIN dbo.dimDate AS dt ON loans.ProcessingDateKey = dt.DateKey
	INNER JOIN dbo.dimOrganization AS org ON loans.OrganizationKey = org.OrganizationKey
	INNER JOIN CubeView.dimRateIndex_cube rateIndex ON acctCommon.RateIndexCode = rateIndex.RateIndexCode AND acctCommon.RateIndex = rateIndex.RateIndex
	INNER JOIN CubeView.dimRateChangeFrequency_cube rateFreq ON isnull(acct.RateChangeFrequencyCode, '-1') = rateFreq.RateChangeFrequencyCode AND isnull(acct.RateChangeFrequency, 'None') = rateFreq.RateChangeFrequency
	LEFT JOIN dbo.dimDate dtO ON loans.OpenedDateKey = dtO.DateKey
	LEFT JOIN dbo.dimDate AS matDate ON loans.MaturityDateKey = matDate.DateKey
	LEFT JOIN dbo.dimDate AS rateDate on loans.NextRateChangeDateKey = rateDate.DateKey

	--GO

	/****** Object:  Index [IX_ForecastProductCashFlows_Product]    Script Date: 11/17/2015 6:18:34 PM ******/
	IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastProductCashFlows]') AND name = N'IX_ForecastProductCashFlows_Product')
	CREATE CLUSTERED INDEX [IX_ForecastProductCashFlows_Product] ON [dbo].[ForecastProductCashFlows]
	(
		[ProductTypeCode] ASC,
		[ProductKey] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
	--GO
	/****** Object:  Index [IX_ForecastProductCashFlows_Branch]    Script Date: 11/17/2015 6:19:38 PM ******/
	IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastProductCashFlows]') AND name = N'IX_ForecastProductCashFlows_Branch')
	CREATE NONCLUSTERED INDEX [IX_ForecastProductCashFlows_Branch] ON [dbo].[ForecastProductCashFlows]
	(
		[BranchCode] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
	--GO
	/****** Object:  Index [IX_ForecastProductCashFlows_Region]    Script Date: 11/17/2015 6:20:04 PM ******/
	IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastProductCashFlows]') AND name = N'IX_ForecastProductCashFlows_Region')
	CREATE NONCLUSTERED INDEX [IX_ForecastProductCashFlows_Region] ON [dbo].[ForecastProductCashFlows]
	(
		[RegionCode] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
	--GO



	/****** Object:  Index [IX_ForecastTimeDeposits_Product]    Script Date: 11/17/2015 6:21:06 PM ******/
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastTimeDeposits]') AND name = N'IX_ForecastTimeDeposits_Product')
	DROP INDEX [IX_ForecastTimeDeposits_Product] ON [dbo].[ForecastTimeDeposits] WITH ( ONLINE = OFF )
	--GO
	/****** Object:  Index [IX_ForecastTimeDeposits_Branch]    Script Date: 11/17/2015 6:21:41 PM ******/
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastTimeDeposits]') AND name = N'IX_ForecastTimeDeposits_Branch')
	DROP INDEX [IX_ForecastTimeDeposits_Branch] ON [dbo].[ForecastTimeDeposits]
	--GO
	/****** Object:  Index [IX_ForecastTimeDeposits_Region]    Script Date: 11/17/2015 6:22:16 PM ******/
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastTimeDeposits]') AND name = N'IX_ForecastTimeDeposits_Region')
	DROP INDEX [IX_ForecastTimeDeposits_Region] ON [dbo].[ForecastTimeDeposits]
	--GO
	/****** Object:  Table [dbo].[ForecastTimeDeposits]    Script Date: 11/17/2015 5:45:50 PM ******/
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ForecastTimeDeposits]') AND type in (N'U'))
	DROP TABLE [dbo].[ForecastTimeDeposits]
	--GO

	/* Pre-populate ForecastTimeDeposits. THIS TABLE MUST BE KEPT UP-TO-DATE WITH THE NIGHTLY ETL!!! */
	SELECT 
		-- Fields used to return data
		acct.AccountNumber			AS AccountNumber,	-- DataType: String
		cod.CurrentBalance	AS CurrentBalance,	-- DataType: Numeric
		cod.ClosingBalance,
		cod.MTDAggregateBalance,
		cod.MTDAverageBalance,
		cod.OpeningBalance,
		cod.PreviousBalance,
		cod.PrevPaymentBalance,
		cod.YesterdayBalance,
		cod.YTDAggregateBalance,
		cod.YTDAverageBalance,
		products.ProductCode		AS ProductNumber,	-- DataType: String
		products.Product			AS ProductName,		-- DataType: String
		cod.InterestRate			AS InterestRate,	-- DataType: Numeric
		matDate.FullDate			AS MaturityDate,	-- DataType: Datetime
		dates.FullDate  			AS DateLastUpdated,	-- DataType: Datetime
		enterDate.FullDate		AS DateEntered,		-- DataType: Datetime
	 dates.datemonth
	 ,dates.DateYear
	 ,products.ProductTypeCode
	 ,RegionCode
	 ,BranchCode
	 ,products.ProductKey
	 ,MaturityDateKey
	 ,EnterDateKey
	 ,cod.OrganizationKey
	INTO dbo.ForecastTimeDeposits
	FROM dbo.factCDs cod
	INNER JOIN dbo.dimProduct products ON cod.ProductKey = products.ProductKey
	INNER JOIN dbo.dimDate dates ON cod.ProcessingDateKey = dates.DateKey
	INNER JOIN dbo.dimAccountCD acct ON cod.AccountCDKey = acct.AccountCDKey
	INNER JOIN dbo.dimOrganization org ON cod.OrganizationKey = org.OrganizationKey
	LEFT JOIN dbo.dimDate matDate ON cod.MaturityDateKey = matDate.DateKey
	LEFT JOIN dbo.dimDate enterDate ON cod.EnterDateKey = enterDate.DateKey
	--GO

	/****** Object:  Index [IX_ForecastTimeDeposits_Product]    Script Date: 11/17/2015 6:21:06 PM ******/
	IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastTimeDeposits]') AND name = N'IX_ForecastTimeDeposits_Product')
	CREATE CLUSTERED INDEX [IX_ForecastTimeDeposits_Product] ON [dbo].[ForecastTimeDeposits]
	(
		[ProductTypeCode] ASC,
		[ProductKey] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
	--GO
	/****** Object:  Index [IX_ForecastTimeDeposits_Branch]    Script Date: 11/17/2015 6:21:41 PM ******/
	IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastTimeDeposits]') AND name = N'IX_ForecastTimeDeposits_Branch')
	CREATE NONCLUSTERED INDEX [IX_ForecastTimeDeposits_Branch] ON [dbo].[ForecastTimeDeposits]
	(
		[BranchCode] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
	--GO
	/****** Object:  Index [IX_ForecastTimeDeposits_Region]    Script Date: 11/17/2015 6:22:16 PM ******/
	IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ForecastTimeDeposits]') AND name = N'IX_ForecastTimeDeposits_Region')
	CREATE NONCLUSTERED INDEX [IX_ForecastTimeDeposits_Region] ON [dbo].[ForecastTimeDeposits]
	(
		[RegionCode] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
	--GO
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ForecastProducts]') AND type in (N'U'))
	DROP TABLE [dbo].[ForecastProducts]
	--GO

	IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ForecastProducts]') AND type in (N'U'))
	BEGIN
	CREATE TABLE [dbo].[ForecastProducts](
		[ProductKey] [int] NOT NULL,
		[IsFixedRate] [bit] NULL
	) ON [PRIMARY]
	END
	--GO

	/* Pre-populate ForecastProducts. THIS TABLE MUST BE KEPT UP-TO-DATE WITH THE NIGHTLY ETL!!! */
	INSERT INTO [dbo].[ForecastProducts] (ProductKey, IsFixedRate)
	SELECT DISTINCT loans.ProductKey, CAST(ISNULL(acct.FixedRateFlag, 0) AS bit) AS IsFixedRate
	FROM CubeView.factLoans_cube loans
	INNER JOIN CubeView.dimAccountLoan_cube acct ON acct.AccountLoanKey = loans.AccountLoanKey AND acct.CurrentRecord = 1
	--GO
	
Return(1)

END TRY


BEGIN CATCH
	Return(0)
END CATCH; 


END






GO
--===============================================
USE [SNLBanker_DW]
GO

/****** Object:  StoredProcedure [dbo].[LoadGLReportingRollup]    Script Date: 5/17/2019 2:25:43 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[LoadGLReportingRollup] (@InsertedBy varchar(50) = NULL)
	
AS
BEGIN

BEGIN TRY

	If (@InsertedBy is null )
	Begin
		Set @InsertedBy = SYSTEM_USER
	End
	
	/*
	Populating dimGLReportingRollup:

	1) For Chart Of Accounts the GLReportRollupKey = GLAccountNumber; PrimaryHierarchy = 1; GLReportKey = 0; StandardHierarchy =0
	2) For Other Condensed Reports GLReportRollupKey = GLReportKey + GL Parent Account Number + GL Account Number
	3) GLReportKey is unique in this table
	*/

	------------Chart Of Accounts------------
	IF OBJECT_ID('tempdb..#Rollups') IS NOT NULL
		DROP TABLE #Rollups

	create table #Rollups (
		GLReportRollupKey varchar(30), 
		GLReportRollupName varchar(200), 
		GLReportRollupCategory varchar(50), 
		GLReportName varchar(200), 
		GLReportRollupParentKey varchar(30),
		GLReportRollupUnaryOperator char(1), 
		GLAccountNumber varchar(15), 
		ReportType varchar(2), 
		PrimaryHierarchy smallint, 
		StandardHierarchy smallint, 
		GLReportKey int,
		LeafLevel varchar(10),
		GLAccountTypeCode char(1),
		SortOrderOverride bigint --0227 KM added new
		)

	--ChartOfAccounts
	insert into #Rollups (GLReportRollupKey, GLReportRollupName, GLReportRollupCategory, GLReportName, GLReportRollupParentKey,
		GLReportRollupUnaryOperator, GLAccountNumber, ReportType, PrimaryHierarchy, StandardHierarchy, GLReportKey, LeafLevel,
		GLAccountTypeCode,SortOrderOverride )
	select 
		s.[GL Account Number] as GLReportRollupKey, isnull(max(s.[GL Account Name]),'') as [GLReportRollupName], 
		case when max(s.[GL Account Category]) is not null then max(s.[GL Account Category])
		when max(s.[GL Account Type]) = 'A' then 'Asset' 
		when max(s.[GL Account Type]) = 'L' then 'Liability'
		when max(s.[GL Account Type]) = 'C' then 'Capital'
		when max(s.[GL Account Type]) = 'I' then 'Income'
		when max(s.[GL Account Type]) = 'E' then 'Expense'
		end as [GLReportRollupCategory],
		'Chart Of Accounts' as [GLReportName], max(s.[GL Parent Account Number]) as [GLReportRollupParentKey], 
		max(s.[Unary Operator]) as [GLReportRollupUnaryOperator], s.[GL Account Number] as [GLAccountNumber], max(s.[Report Type]) as [ReportType],
		1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey, max(s.[Leaf Level Flag]), max(s.[GL Account Type]),
		 ISNULL(max(s.SortOrder),0) --0227KM 
	from stage.ChartOfAccounts s
	where s.[GL Account Number] is not null
	group by s.[GL Account Number]

	--GL
	insert into #Rollups (GLReportRollupKey, GLReportRollupName, GLReportRollupCategory, GLReportName, GLReportRollupParentKey,
		GLReportRollupUnaryOperator, GLAccountNumber, ReportType, PrimaryHierarchy, StandardHierarchy, GLReportKey,LeafLevel,
		GLAccountTypeCode)
	select
		s.[GL Account Number] as GLReportRollupKey, max(isnull(s.[GL Account Name],''))  as [GLReportRollupName], 
		case when max(s.[GL Account Type]) = 'A' then 'Asset' 
		when max(s.[GL Account Type]) = 'L' then 'Liability'
		when max(s.[GL Account Type]) = 'C' then 'Capital'
		when max(s.[GL Account Type]) = 'I' then 'Income'
		when max(s.[GL Account Type]) = 'E' then 'Expense'
		end as [GLReportRollupCategory],
		'Chart Of Accounts' as [GLReportName], null as [GLReportRollupParentKey], 
		'+' as [GLReportRollupUnaryOperator], s.[GL Account Number] as [GLAccountNumber], max(s.[Report Type]) as [ReportType],
		1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey, 0 as LeafLevel,max(s.[GL Account Type])
	from stage.GL s
		left join #Rollups r on r.GLAccountNumber = s.[GL Account Number]
	where s.[GL Account Number] is not null and r.GLAccountNumber is null
	group by s.[GL Account Number] 

	--Budget
	insert into #Rollups (GLReportRollupKey, GLReportRollupName, GLReportRollupCategory, GLReportName, GLReportRollupParentKey,
		GLReportRollupUnaryOperator, GLAccountNumber, ReportType, PrimaryHierarchy, StandardHierarchy, GLReportKey, LeafLevel,
		GLAccountTypeCode)
	select
		s.[GL Account Number] as GLReportRollupKey, max(isnull(s.[GL Account Name],''))  as [GLReportRollupName], 
		case when max(s.[GL Account Type]) = 'A' then 'Asset' 
		when max(s.[GL Account Type]) = 'L' then 'Liability'
		when max(s.[GL Account Type]) = 'C' then 'Capital'
		when max(s.[GL Account Type]) = 'I' then 'Income'
		when max(s.[GL Account Type]) = 'E' then 'Expense'
		end as [GLReportRollupCategory],
		'Chart Of Accounts' as [GLReportName], null as [GLReportRollupParentKey], 
		'+' as [GLReportRollupUnaryOperator], s.[GL Account Number] as [GLAccountNumber], max(s.[Report Type]) as [ReportType],
		1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey, 0 as LeafLevel,max(s.[GL Account Type])
	from stage.Budget s
		left join #Rollups r on r.GLAccountNumber = s.[GL Account Number]
	where s.[GL Account Number] is not null and r.GLAccountNumber is null
	group by s.[GL Account Number] 

	--Assign orphan accounts to default parents
	update r
	set r.GLReportRollupParentKey = case r.GLAccountTypeCode when 'A' then '1999999999999' when 'L' then '2999999999999'
		when 'C' then '3999999999999' when 'I' then '4999999999999' when 'E' then '5999999999999' end
	from #Rollups r
	where r.GLReportRollupParentKey is null and r.LeafLevel = 0

	--Insert default parents
	insert into #Rollups (GLReportRollupKey, GLReportRollupName, GLReportRollupCategory, GLReportName, GLReportRollupParentKey,
		GLReportRollupUnaryOperator, GLAccountNumber, ReportType, PrimaryHierarchy, StandardHierarchy, GLReportKey, LeafLevel,
		GLAccountTypeCode)
	select a.* 
	from (
		Select '1999999999998' as GLReportRollupKey, 'Non-Parented Accounts' as GLReportRollupName, 'Asset' as GLReportRollupCategory, 
			'Chart Of Accounts' as [GLReportName], null as [GLReportRollupParentKey], '+' as GLReportRollupUnaryOperator,
			'1999999999998' as GLAccountNumber, 'B' as ReportType, 1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey,
			1 as LeafLevel, 'A' as GLAccountTypeCode
		Union
		Select '1999999999999' as GLReportRollupKey, 'Total Assets' as GLReportRollupName, 'Asset' as GLReportRollupCategory, 
			'Chart Of Accounts' as [GLReportName], '1999999999998' as [GLReportRollupParentKey], '+' as GLReportRollupUnaryOperator,
			'1999999999999' as GLAccountNumber, 'B' as ReportType, 1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey,
			1 as LeafLevel, 'A' as GLAccountTypeCode
		Union
		Select '2999999999999' as GLReportRollupKey, 'Total Liabilities' as GLReportRollupName, 'Liability' as GLReportRollupCategory, 
			'Chart Of Accounts' as [GLReportName], '1999999999998' as [GLReportRollupParentKey], '+' as GLReportRollupUnaryOperator,
			'2999999999999' as GLAccountNumber, 'B' as ReportType, 1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey,
			1 as LeafLevel, 'L' as GLAccountTypeCode
		Union
		Select '3999999999999' as GLReportRollupKey, 'Total Capital' as GLReportRollupName, 'Capital' as GLReportRollupCategory, 
			'Chart Of Accounts' as [GLReportName], '1999999999998' as [GLReportRollupParentKey], '+' as GLReportRollupUnaryOperator,
			'3999999999999' as GLAccountNumber, 'B' as ReportType, 1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey,
			1 as LeafLevel, 'C' as GLAccountTypeCode
		Union
		Select '4999999999999' as GLReportRollupKey, 'Total Income' as GLReportRollupName, 'Income' as GLReportRollupCategory, 
			'Chart Of Accounts' as [GLReportName], '6999999999999' as [GLReportRollupParentKey], '+' as GLReportRollupUnaryOperator,
			'4999999999999' as GLAccountNumber, 'I' as ReportType, 1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey,
			1 as LeafLevel, 'I' as GLAccountTypeCode
		Union
		Select '5999999999999' as GLReportRollupKey, 'Total Expense' as GLReportRollupName, 'Expense' as GLReportRollupCategory, 
			'Chart Of Accounts' as [GLReportName], '6999999999999' as [GLReportRollupParentKey], '-' as GLReportRollupUnaryOperator,
			'5999999999999' as GLAccountNumber, 'I' as ReportType, 1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey,
			1 as LeafLevel, 'E' as GLAccountTypeCode
		Union
		Select '6999999999999' as GLReportRollupKey, 'Net Income' as GLReportRollupName, 'Income' as GLReportRollupCategory, 
			'Chart Of Accounts' as [GLReportName], '1999999999998' as [GLReportRollupParentKey], '+' as GLReportRollupUnaryOperator,
			'6999999999999' as GLAccountNumber, 'I' as ReportType, 1 as PrimaryHierarchy, 0 as StandardHierarchy, 0 as GLReportKey,
			1 as LeafLevel, 'I' as GLAccountTypeCode
			) a
		left join #Rollups r on r.GLReportRollupKey = a.GLReportRollupKey
	where r.GLReportRollupKey is null


	Merge into dbo.dimGLReportingRollup t
	Using (
		select 
			s.GLReportRollupKey, s.[GLReportRollupName], s.[GLReportRollupCategory],
			s.[GLReportName], s.[GLReportRollupParentKey], 
			s.[GLReportRollupUnaryOperator], s.[GLAccountNumber], s.[ReportType],
			s.PrimaryHierarchy, s.StandardHierarchy, s.GLReportKey
			,ISNULL(s.SortOrderOverride,0) AS SortOrderOverride  -- 0227KM
		from #Rollups s
		where s.GLReportRollupKey is not null
		) s on t.GLReportRollupKey = s.GLReportRollupKey
	When not matched then
	Insert (GLReportRollupKey,
			GLReportRollupName,
			GLReportRollupCategory,
			GLReportName,
			GLReportRollupParentKey,
			GLReportRollupUnaryOperator,
			GLAccountNumber,
			InsertedBy,
			ReportType,
			PrimaryHierarchy,
			StandardHierarchy,
			GLReportKey
			,SortOrderOverride) --0227KM
	Values (GLReportRollupKey,
			GLReportRollupName,
			GLReportRollupCategory,
			GLReportName,
			GLReportRollupParentKey,
			GLReportRollupUnaryOperator,
			GLAccountNumber,
			@InsertedBy,
			ReportType,
			PrimaryHierarchy,
			StandardHierarchy,
			GLReportKey
			,ISNULL(SortOrderOverride,0))--0227KM
	When matched and (ISNULL(t.GLReportRollupName,'') <> ISNULL(s.GLReportRollupName,'') OR
			ISNULL(t.GLReportRollupCategory,'') <> ISNULL(s.GLReportRollupCategory,'') OR
			ISNULL(t.GLReportRollupUnaryOperator,'') <> ISNULL(s.GLReportRollupUnaryOperator,'') OR
			ISNULL(t.GLReportName,'') <> ISNULL(s.GLReportName,'') OR
			ISNULL(t.GLReportRollupParentKey,'') <> ISNULL(s.GLReportRollupParentKey,'') OR
			ISNULL(t.ReportType,'') <> ISNULL(s.ReportType,'') OR
			ISNULL(t.PrimaryHierarchy,0) <> ISNULL(s.PrimaryHierarchy,0) OR
			ISNULL(t.StandardHierarchy,0) <> ISNULL(s.StandardHierarchy,0) OR
			ISNULL(t.GLReportKey,0) <> ISNULL(s.GLReportKey,0))
			OR ISNULL(t.SortOrderOverride,0) <> ISNULL(s.SortOrderOverride,0) -- 0227KM
	Then Update
		Set t.GLReportRollupName = s.GLReportRollupName,
			t.GLReportRollupCategory = s.GLReportRollupCategory,
			t.GLReportRollupUnaryOperator = s.GLReportRollupUnaryOperator,
			t.GLReportName = s.GLReportName,
			t.GLReportRollupParentKey = s.GLReportRollupParentKey,
			t.ReportType = s.ReportType,
			t.PrimaryHierarchy = s.PrimaryHierarchy,
			t.StandardHierarchy = s.StandardHierarchy,
			t.GLReportKey = s.GLReportKey,
			t.SortOrderOverride= ISNULL(s.SortOrderOverride,0),--0227
			t.LastUpdatedDate = getdate(),
			t.LastUpdatedBy = @InsertedBy
	WHEN NOT MATCHED BY SOURCE AND t.PrimaryHierarchy = 1 THEN
		Delete;
	
	------------Condensed GL / Rate Volume------------
	--For alternate hierarchies the GLNumber (dimGLAccount) can be max of 11 characters, the numbers cannot overlap with COA or another alternate hierarchy
	--GLReportRollupKey = GLReportKey (3 char with leading 0's) + GL Parent Account Number (13 char with leading 0's) + GL Account Number (13 char with leading 0's)
	--PrimaryHierarchy = 0; GLReportKey = <Unique>; StandardHierarchy = 0
	--<<Insert Code here>>

	------------Condensed GL / Rate Volume------------
	--For alternate hierarchies the GLNumber (dimGLAccount) can be max of 11 characters, the numbers cannot overlap with COA or another alternate hierarchy
	--GLReportRollupKey = GLReportKey (3 char with leading 0's) + GL Parent Account Number (13 char with leading 0's) + GL Account Number (13 char with leading 0's)
	--PrimaryHierarchy = 0; GLReportKey = <Unique>; StandardHierarchy = 0
	--<<Insert Code here>>

--Alt GL Hierarchies
	Merge into dbo.dimGLReportingRollup t
	Using (
		select 
			right(concat('000',s.[Report Number]),4) + right(concat('000000000000', s.[GL Parent Account Number]),13) +right(concat('000000000000', s.[GL Account Number]),13) as GLReportRollupKey, 
			s.[GL Account Name] as GLReportRollupName,
			s.[GL Account Type] as [GLReportRollupCategory],
			s.[Report Name] as [GLReportName], 
			right(concat('000',X0_1.[Report Number]),4) + right(concat('000000000000', X0_1.[GL Parent Account Number]),13) +right(concat('000000000000', X0_1.[GL Account Number]),13) as [GLReportRollupParentKey], 
			s.[Unary Operator] as [GLReportRollupUnaryOperator], 
			left(s.[GL Account Number],11) as [GLAccountNumber], 
			s.[Report Type]  as [ReportType],
			0 as PrimaryHierarchy, 
			0 as StandardHierarchy, 
			s.[Report Number] as GLReportKey
			,ISNULL(s.[Sort Order],0) as SortOrder
		 from stage.AlternateGLHierarchies s
		 LEFT JOIN stage.AlternateGLHierarchies X0_1
			ON s.[GL Parent Account Number] = X0_1.[GL Account Number] and s.[Report Number] = X0_1.[Report Number]

		where s.[GL Account Number] is not null
		) s on t.GLReportRollupKey = s.GLReportRollupKey and t.GLReportRollupParentKey = S.GLReportRollupParentKey
	When not matched then
	Insert (GLReportRollupKey,
			GLReportRollupName,
			GLReportRollupCategory,
			GLReportName,
			GLReportRollupParentKey,
			GLReportRollupUnaryOperator,
			GLAccountNumber,
			InsertedBy,
			ReportType,
			PrimaryHierarchy,
			StandardHierarchy,
			GLReportKey,
			SortOrderOverride)
	Values (GLReportRollupKey,
			GLReportRollupName,
			GLReportRollupCategory,
			GLReportName,
			GLReportRollupParentKey,
			GLReportRollupUnaryOperator,
			GLAccountNumber,
			@InsertedBy,
			ReportType,
			PrimaryHierarchy,
			StandardHierarchy,
			GLReportKey,
			ISNULL(SortOrder,0))
	When matched and (ISNULL(t.GLReportRollupName,'') <> ISNULL(s.GLReportRollupName,'') OR
			ISNULL(t.GLReportRollupCategory,'') <> ISNULL(s.GLReportRollupCategory,'') OR
			ISNULL(t.GLReportRollupUnaryOperator,'') <> ISNULL(s.GLReportRollupUnaryOperator,'') OR
			ISNULL(t.ReportType,'') <> ISNULL(s.ReportType,'') OR
			ISNULL(t.PrimaryHierarchy,0) <> ISNULL(s.PrimaryHierarchy,0) OR
			ISNULL(t.StandardHierarchy,0) <> ISNULL(s.StandardHierarchy,0) OR
			ISNULL(t.GLReportKey,0) <> ISNULL(s.GLReportKey,0) OR
			ISNULL(t.SortorderOverride,0) <> ISNULL(s.SortOrder,0) OR 
			ISNULL(t.GLAccountNumber,0) <> ISNULL(s.[GLAccountNumber],0) OR
			ISNULL(t.GLReportRollupParentKey,0) <> ISNULL(s.GLReportRollupParentKey,0))
	Then Update
		Set t.GLReportRollupName = s.GLReportRollupName,
			t.GLReportRollupCategory = s.GLReportRollupCategory,
			t.GLReportRollupUnaryOperator = s.GLReportRollupUnaryOperator,
			t.ReportType = s.ReportType,
			t.PrimaryHierarchy = s.PrimaryHierarchy,
			t.StandardHierarchy = s.StandardHierarchy,
			t.GLReportKey = s.GLReportKey,
			t.GLAccountNumber = s.GLAccountNumber,
			t.GLReportRollupParentKey = s.GLReportRollupParentKey,
			t.SortOrderOverride = ISNULL(s.SortOrder,0),
			t.LastUpdatedDate = getdate(),
			t.LastUpdatedBy = @InsertedBy
	WHEN NOT MATCHED BY SOURCE AND t.PrimaryHierarchy <> 1 AND t.StandardHierarchy <> 1 THEN
		Delete;


Return(1)

END TRY


BEGIN CATCH
	Return(0)
END CATCH; 


END




--=====================================================================
USE [SNLBanker_DW]
GO

/****** Object:  StoredProcedure [SourceData].[LoadCustomers]    Script Date: 5/17/2019 2:28:21 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Kavish Mody>
-- Create date: <12312015>
-- Description:	<Generate CDs data>
-- =============================================
-- [sourceData].[LoadCustomers] '05/07/2018'
CREATE PROCEDURE [SourceData].[LoadCustomers]   (@DateofData Date)
AS
BEGIN TRY

	SET NOCOUNT ON;

TRUNCATE TABLE Stage.Customers;

IF OBJECT_ID('tempdb..#CustomerInsiderCodes') IS NOT NULL
        DROP TABLE #CustomerInsiderCodes

SELECT A.CUX1CS, A.DMEMP,a.DMBK as BankNumber, CONVERT(VARCHAR,NULL) as InsiderCode
INTO #CustomerInsiderCodes
FROM
(
        SELECT a.DMEMP,b.CUX1CS,a.DMBK
        FROM SourceData.TAP002 a
        JOIN SourceData.CUP009 b on a.DMACCT = b.CUX1AC
        WHERE a.DMEMP <> ''
        UNION
        SELECT LNDOE,b.CUX1CS,a.LNBK 
		FROM SourceData.LNP003 a
        JOIN SourceData.CUP009 b on a.LNNOTE = b.CUX1AC
        WHERE a.LNDOE <> ''
        UNION
        SELECT TMEMP,b.CUX1CS,a.TMBK
		FROM SourceData.TMP003 a
        JOIN SourceData.CUP009 b on a.TMACCT = b.CUX1AC
        WHERE a.TMEMP <> ''
)A

UPDATE A SET InsiderCode = ISNULL(B.InsiderCode, A.DMEMP)
FROM
#CustomerInsiderCodes A
LEFT JOIN 
(
        SELECT CUX1CS, 'E' as InsiderCode,BankNumber FROM #CustomerInsiderCodes
        GROUP BY CUX1CS,BankNumber
        HAVING COUNT(DISTINCT DMEMP) > 1
)B ON A.CUX1CS = B.CUX1CS and A.BankNumber = B.BankNumber


-------------------------------------------
;WITH CTE_InsiderA AS (
SELECT DISTINCT
		cast(CUP00301.CUNBR as varchar(10) ) [Customer Number Encrypted ],

		--CUP00301.CUBK AS [Bank Code]
		CONVERT(VARCHAR(10),CASE CUP00301.CUBK WHEN 170 THEN 200 ELSE CUP00301.CUBK END) AS [Bank Code]
		
		,NULL AS [Class Code]
		,NULL AS [Class Description]
		--,CUP00301.CUSIC AS [NAICS Code]
		,CUP003.CUSIC AS [NAICS Code]   -- Added on 9/21/2018 as per christopher's email
		,NULL AS [NAICS Description]
		,CUP00301.CUSEX AS [Gender]
		,DateDiff(Year,[SourceData].[fn_JulianDate_SQL](CUP00301.CUJBDT),GETDATE()) AS [Age] 
		,ISNULL(CUP004.CUCTWN,'') AS [City]
		,ISNULL(CUP004.CUCSTA,'') AS [State]
		,CUP004.CUCZIP AS [Zip]
		,[SourceData].[fn_ISODate_SQL](CUP003.CUOPDT) AS [Original Customer Date]
		--,CUP003.CUOPDTJ -- All values are 0
		--,[SourceData].[fn_JulianDate_SQL](CUP003.CUOPDTJ) AS [Original Customer Date]
		,'Y' as [Individual]
		,CASE WHEN CUP003.CUPERS = 'P'  AND left(isnull(ltrim(rtrim(CUP004.CUCFNM)),'') + ' ' + isnull(ltrim(rtrim(CUP004.CUCSNM)),'') + ' ' + isnull(ltrim(rtrim(CUP004.CUCLNM)),''), 100) = ''
		THEN CUP004.CUCBUS
		WHEN CUP003.CUPERS = 'P' THEN 
		left(isnull(ltrim(rtrim(CUP004.CUCFNM)),'') + ' ' + isnull(ltrim(rtrim(CUP004.CUCSNM)),'') + ' ' + isnull(ltrim(rtrim(CUP004.CUCLNM)),''), 100) 
		WHEN ISNULL(CUP004.CUCBUS,'') = '' THEN left(isnull(ltrim(rtrim(CUP004.CUCFNM)),'') + ' ' + isnull(ltrim(rtrim(CUP004.CUCSNM)),'') + ' ' + isnull(ltrim(rtrim(CUP004.CUCLNM)),''), 100) 
		ELSE CUP004.CUCBUS END as  [Customername]
		,[SourceData].[fn_JulianDate_SQL](CUP00301.CUJBDT) as [DateOfBirth]
		--,left(isnull(ltrim(rtrim(CUP004.CUCHNO)),'') + ' ' + isnull(ltrim(rtrim(CUP004.CUCSTR)),'') + ' ' + isnull(ltrim(rtrim(CUP004.CUCFNO)),''), 100) AS [AddressLine1]
		,CASE WHEN ISNULL(LTRIM(RTRIM(CUP004.CUCHNM)), '') != '' THEN ISNULL(LTRIM(RTRIM(CUP004.CUCHNM)), '') ELSE ISNULL(LTRIM(RTRIM(CUP004.CUCHNO)), '') + ' ' + ISNULL(LTRIM(RTRIM(CUP004.CUCSTR)), '') END AS [AddressLine1]
--		,CIC.InsiderCode as [InsiderCode]
--		,CFP505.CFLDSC as [InsiderCodeDescription]

	 --  ,CASE CUP003.CUEMPL WHEN 'E' THEN 'E' WHEN 'O' THEN 'O' WHEN 'D' THEN 'D' ELSE 'I' END AS [InsiderCode] -- UPdated code form REPLACE(CUP003.CUEMPL,'',NULL) to "I" on 3/18/2019 as per christopher's email dated 3/15/2019
	--	,CASE CUP003.CUEMPL WHEN 'E' THEN 'EMPLOYEE' WHEN 'O' THEN 'EXECUTIVE' WHEN 'D' THEN 'DIRECTOR' ELSE 'RELATED INTEREST' END AS [InsiderCodeDescription]

		,CASE WHEN CUP003.CUEMPL IN ('D','O','E')  AND (ISNULL(CUP009.CUXREL,'') NOT IN ('OWN','SOW') AND LEFT(ISNULL(CUP009.CUXREL,''),2) NOT IN ('JA','JO') )  
                       THEN 'I' WHEN CUP003.CUEMPL = '' THEN NULL ELSE CUP003.CUEMPL END AS [InsiderCode]

               ,CASE WHEN CUP003.CUEMPL IN ('D','O','E')  AND (ISNULL(CUP009.CUXREL,'') NOT IN ('OWN','SOW') AND LEFT(ISNULL(CUP009.CUXREL,''),2) NOT IN ('JA','JO') )  
                       THEN 'RELATED INTEREST' 
		          ELSE CASE CUP003.CUEMPL WHEN 'E' THEN 'EMPLOYEE' 
		                                  WHEN 'O' THEN 'EXECUTIVE'
					                      WHEN 'D' THEN 'DIRECTOR'
										  WHEN ''  THEN  NULL ELSE CUP003.CUEMPL 
				       END
              END AS [InsiderCodeDescription]             -- PG : Code for Insidercode and InsiderCodeDescription on 8 April 2019 

		,NULL as [CountyCode]
		,ISNULL(CUP004.CUCCTY,'') as [County]
		,CUP003.CUHMPH as [HomePhone]
		,CUP003.CUBUPH as [BusinessPhone]
		,NULL as [FICOScore]
		--,CUP003.CUEMA1 as [EmailAddress]
		--,CUP027.CUTHI1 as [EmailAddress]
		,COALESCE(NULLIF(CUP027.CUTHI1, ''), NULLIF(CUP003.CUEMA1,''), NULLIF(CUP003.CUEMA2,'')) as [EmailAddress]
		,CUP003.CUSSNR as [TaxID]
		--,CUP003.CUNA2 AS [Addressline2]
		,CASE WHEN ISNULL(LTRIM(RTRIM(CUP004.CUCHNM)), '') != '' THEN ISNULL(LTRIM(RTRIM(CUP004.CUCHNO)), '') + ' ' + ISNULL(LTRIM(RTRIM(CUP004.CUCSTR)), '') ELSE NULL END AS [Addressline2]
		--,CUP003.CUZIP2  AS [ZipCodePlusFour
		,CUP004.CUCZIS  AS [ZipCodePlusFour] -- Mapping changed as per email from Julie dated 7/7
		,CASE CUP003.CUPERS WHEN 'P' THEN isnull(ltrim(rtrim(CUP004.CUCFNM)),'') ELSE '' END AS [FirstName]
		,CASE CUP003.CUPERS WHEN 'P' THEN isnull(ltrim(rtrim(CUP004.CUCLNM)),'') ELSE '' END AS [LastName]
		,CASE CUP003.CUPERS WHEN 'P' THEN 'Person' WHEN 'N' THEN 'Non Person' END AS [Customer Type]
		,CUP003.CUPERS as [TaxIDTypecode]
		,CASE CUP003.CUPERS WHEN 'P' THEN 'Person' WHEN 'N' THEN 'Non Person' END AS [TaxIDType],
		CUP003.CUCLPH AS [CellPhoneNumber],
		CUP003.CUEMPL as PrivateCustomer,
		CUP003.CUEMA1 AS HomeEmail,
		CUP003.CUEMA2 AS BusinessEMail,
		--CUP027.CUTHI2 AS EStatementEMail,
		CUP027.CUTHI1 AS EStatementEMail, -- Changed as per email from Marc dated 7/9
		CUP027.CUTEN4 AS MandAAcquired,
		CUP003.CUSSTY AS TaxIDFlag,
		CUP003.CUCIRA AS WHFlag,
		CUP003.CUSHRT AS Shortname

		,ROW_NUMBER() OVER(Partition BY cast(CUP00301.CUNBR as varchar(10)) ORDER BY CASE WHEN CUP003.CUEMPL IN ('D','O','E')  AND (ISNULL(CUP009.CUXREL,'') NOT IN ('OWN','SOW') AND LEFT(ISNULL(CUP009.CUXREL,''),2) NOT IN ('JA','JO') )  
            THEN 'RELATED INTEREST' ELSE CASE CUP003.CUEMPL WHEN 'E' THEN 'EMPLOYEE' WHEN 'O' THEN 'EXECUTIVE' WHEN 'D' THEN 'DIRECTOR' ELSE CUP003.CUEMPL END END) AS RN

FROM  SourceData.CUP00301 CUP00301
LEFT JOIN SourceData.CUP004 CUP004 ON CUP00301.CUBK = CUP004.CUCBK AND CUP00301.CUNBR = CUP004.CUCNBR
LEFT JOIN SourceData.CUP003 CUP003 ON CUP00301.CUBK = CUP003.CUBK AND CUP00301.CUNBR = CUP003.CUNBR
--LEFT JOIN SourceData.CFP505 CFP505 ON CUP00301.CUBK = CFP505.CFBK AND CUP00301.CUPERS = CFP505.CFLSNR AND CFP505.CFREC = 514
LEFT JOIN SourceData.CUP027 CUP027 ON CUP00301.CUBK = CUP027.CUBK AND CUP00301.CUNBR = CUP027.CUNBR
LEFT JOIN #CustomerInsiderCodes CIC on CUP00301.CUNBR = CIC.CUX1CS and CUP00301.CUBK = CIC.BankNumber
LEFT JOIN SourceData.CFP505 CFP505 on CIC.InsiderCode = CFP505.CFLSNR and CIC.BankNumber = CFP505.CFBK and CFP505.CFREC = '514'

--LEFT JOIN Sourcedata.CUP009 A ON CAST(A.CUX1AC AS VARCHAR(MAX)) = CAST(CUP003.CUNBR  AS VARCHAR(MAX))
-- and CAST(A.CUXBK AS VARCHAR(MAX)) = CAST(CUP003.CUNBR AS VARCHAR(MAX

LEFT JOIN SourceData.CUP009 CUP009 ON CUP003.CUNBR = CUP009.CUX1CS AND CUP003.CUBK = CUP009.CUXBK   --PG : Added join for Insidercode and InsiderCodeDescription on 8 April 2019
WHERE ISNULL(LTRIM(RTRIM(CUP00301.CUNBR)), '') != '')

-------------------------------------------

INSERT INTO stage.customers(
									[Customer Number Encrypted ] ,
									[Bank Code],
									[Class Code] ,
									[Class Description],
									[NAICS Code],
									[NAICS Description],
									[Gender],
									[Age] ,
									[City] ,
									[State],
									[Zip],
									[OriginalCustomerDate],                                       
                                    [Individual],                                    
                                    [Customername],                                                   
                                    [DateOfBirth],
									[AddressLine1],
									[InsiderCode],
									[InsiderCodeDescription],
									[CountyCode],
									[County],
									[HomePhone],
									[BusinessPhone],
									[FICOScore],
									[EmailAddress],
									[TaxID],
									[Addressline2],
									[ZipCodePlusFour],
									[FirstName],
									[LastName],
									[CustomerType],
									[TaxIDTypecode],
									[TaxIDType],
									[CellPhoneNumber],
									PrivateCustomer,
									HomeEMail,
									BusinessEMail,
									EStatementEMail,
									MandAAcquired,
									TaxIDFlag,
									WHFlag,
									Shortname
									)


                              SELECT [Customer Number Encrypted ] ,
									[Bank Code],
									[Class Code] ,
									[Class Description],
									[NAICS Code],
									[NAICS Description],
									[Gender],
									[Age] ,
									[City] ,
									[State],
									[Zip],
									[Original Customer Date],                                       
                                    [Individual],                                    
                                    [Customername],                                                   
                                    [DateOfBirth],
									[AddressLine1],
									[InsiderCode],
									[InsiderCodeDescription],
									[CountyCode],
									[County],
									[HomePhone],
									[BusinessPhone],
									[FICOScore],
									[EmailAddress],
									[TaxID],
									[Addressline2],
									[ZipCodePlusFour],
									[FirstName],
									[LastName],
									[Customer Type],
									[TaxIDTypecode],
									[TaxIDType],
									[CellPhoneNumber],
									PrivateCustomer,
									HomeEMail,
									BusinessEMail,
									EStatementEMail,
									MandAAcquired,
									TaxIDFlag,
									WHFlag,
									Shortname
 FROM CTE_InsiderA WHERE RN = 1 



Return(1)
END TRY
BEGIN CATCH
	
Return(0)
	
END CATCH;





GO


--=======================================================
select BANK_NUMBER   =convert(char(5),CUBK),     --GBANKNBR),
       CUSTOMER_NUMBER      =convert(CHAR (10),CUNBR),
       APPL_ID              ='CU',     --GAPPLID ),
       [PROVIDER] = convert(char(10),(SELECT [PROVIDER] FROM INFORMENT.TA_TM_BANK_CONTROL_FILE)), --GPROVCBS --virtual column                                                     
       ROW_PROCESSED_THRU = convert(char(8),(SELECT ROW_PROCESSED_THRU FROM INFORMENT.TA_TM_BANK_CONTROL_FILE)), 
	   ROW_UPDATE_DATE = (SELECT ROW_UPDATE_DATE FROM INFORMENT.TA_TM_BANK_CONTROL_FILE),
	   ROW_UPDATE_TYPE = convert(char(3),(SELECT ROW_UPDATE_TYPE FROM INFORMENT.TA_TM_BANK_CONTROL_FILE)), 
       USER_FLD_1_LENGTH_10 =convert(CHAR (10),CUTEN1),
       USER_FLD_1_LENGTH_20 =convert(CHAR (20),CUTWN1),
       USER_FLD_1_LENGTH_3  =convert(CHAR (3 ),CUTHR1),
       USER_FLD_1_LENGTH_30 =convert(CHAR (30),CUTHI1),
       USER_FLD_1_LENGTH_5  =convert(CHAR (5 ),CUFIV1),
       USER_FLD_1_LENGTH_7_0=convert(DECIMAL(7,0),CUSEV1),
       USER_FLD_2_LENGTH_10 =convert(CHAR (10),CUTEN2),
       USER_FLD_2_LENGTH_20 =convert(CHAR (20),CUTWN2),
       USER_FLD_2_LENGTH_3  =convert(CHAR (3 ),CUTHR2),
       USER_FLD_2_LENGTH_30 =convert(CHAR (30),CUTHI2),
       USER_FLD_2_LENGTH_5  =convert(CHAR (5 ),CUFIV2),
       USER_FLD_2_LENGTH_7_0=convert(DECIMAL(7,0),CUSEV2),
       USER_FLD_3_LENGTH_10 =convert(CHAR (10),CUTEN3),
       USER_FLD_3_LENGTH_20 =convert(CHAR (20),CUTWN3),
       USER_FLD_3_LENGTH_3  =convert(CHAR (3 ),CUTHR3),
       USER_FLD_3_LENGTH_30 =convert(CHAR (30),CUTHI3),
       USER_FLD_3_LENGTH_5  =convert(CHAR (5 ),CUFIV3),
       USER_FLD_3_LENGTH_7_0=convert(DECIMAL(7,0),CUSEV3),
       USER_FLD_4_LENGHT_5  =convert(CHAR (5 ),CUFIV4),
       USER_FLD_4_LENGTH_10 =convert(CHAR (10),CUTEN4),
       USER_FLD_4_LENGTH_20 =convert(CHAR (20),CUTWN4),
       USER_FLD_4_LENGTH_3  =convert(CHAR (3 ),CUTHR4),
       USER_FLD_4_LENGTH_30 =convert(CHAR (30),CUTHI4),
       USER_FLD_4_LENGTH_7_0=convert(DECIMAL(7,0),CUSEV4),
       USER_FLD_5_LENGHT_5  =convert(CHAR (5 ),CUFIV5),
       USER_FLD_5_LENGTH_10 =convert(CHAR (10),CUTEN5),
       USER_FLD_5_LENGTH_20 =convert(CHAR (20),CUTWN5),
       USER_FLD_5_LENGTH_3  =convert(CHAR (3 ),CUTHR5),
       USER_FLD_5_LENGTH_30 =convert(CHAR (30),CUTHI5),
       USER_FLD_5_LENGTH_7_0=convert(DECIMAL(7,0),CUSEV5)
       from  (select  *,rn = row_number() over(partition by CUNBR order by CUTEN5 desc,CUTWN4 desc )
              from SNLBanker_DW.SourceData.CUP027 ) t
       where t.rn = 1
--==============================================
MRC:7312019
-===============
Loan_table_code:
SELECT  
    XREF.LOAN_KEY
,XREF.LOAN_NBR [Loan Number]
,LOAN.UPB_AMT
,MTH_LATE_CHRG_AMT
,LATE_CHRG_GRACE_PRD_DAY_CNT
,FRCLS_IND
,LOAN_MLSTN_DT.MLSTN_DTTM
,LOAN_MLSTN_DT.MLSTN_TYPE_NM
,LOAN.END_DTTM
,LAST_PYMT_RCVD_DT
,LOAN.ESCRW_ADVN_AMT
,LOAN_BAL.LNDR_PD_ALL_EXPNS_AMT
,LOAN_BAL.DFR_NSF_FEE_AMT
,LOAN_BAL.DFR_LATE_CHRG_AMT
,LT.LOAN_TYPE_DESC [Loan Type]
,ADDR.ADDR_ID
,ADDR.STATE_OR_PROV_CD
,loan.LOAN_TYPE_CD
,CASE 
 WHEN LT.LOAN_TYPE_CD IN(1,6)
THEN 'FHA'
WHEN LT.LOAN_TYPE_CD =2
THEN 'USDA'
WHEN LT.LOAN_TYPE_CD =4
THEN 'VA'
WHEN LT.LOAN_TYPE_CD =5
THEN 'PMI'
ELSE 'Uninsured'
End Insurer
,CASE
WHEN LOAN.ESCRW_IND = 'Y' THEN 1
ELSE 0
END ESCRW_IND
,CASE
WHEN LOAN.ESCRW_IND = 'Y' THEN 'Escrowed'
ELSE 'Non-Escrowed'
END [Escrow Indicator]
,INV.INVSTR_CD
--, DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) AS DPD 
    ,CASE 
                     
            WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) <= 0 
            THEN 'CURR'
                     WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) < 30  
            THEN 'Pre'
            WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) < 60 
            THEN '30s'
            WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) < 90
            THEN '60s'
            WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) < 120
            THEN '90s'
            ELSE '120+'

    END AS [Current Delinquency Status]

   ,CASE 
                           
            WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) <= 0 
            THEN 1
                     WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) < 30  
            THEN 2
            WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) < 60 
            THEN 3
            WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) < 90
            THEN 4
            WHEN DATEDIFF(DAY,LOAN.NXT_PYMT_DUE_DT,CAST(GETDATE() AS DATE)) < 120
            THEN 5
            ELSE 6
      END AS [Current Delinquency Status Sort]
  --,LOAN_DELQ.OTS_DELQ_STS_CD [OTS Delinquency Status]
  ,ADDR.STATE_OR_PROV_CD [Property State]
  ,CONVERT (datetime2(3), SYSDATETIME()) [Last Refresh Date Time]
  ,CASE
          WHEN LOAN.ESCRW_ADVN_AMT > 0
           THEN 'Advances'
           WHEN LOAN_BAL.LNDR_PD_ALL_EXPNS_AMT > 0
           THEN 'Expenses'
           ELSE 'N/A'
   END [Expense-Advances Indicator]
,REO.[REO Status] /*CASE WHEN REO.[REO Status] IN ('Pre-Listed','Eviction','Listed','Under Contract','Hold','Sold') THEN REO.[REO Status] 
  WHEN REO.[REO Status] is null Then 'Blank' 
  ELSE 'All Others' END [REO Status]*/
,LOAN.NOTE_PCT_RT AS NOTE_RT,
       LOAN.LOAN_AGE AS LOAN_AGE,
       CAST(CAST(LOAN.LOAN_AGE AS DECIMAL(6,2)) / 12 AS DECIMAL(6,2)) AS LOAN_AGE_YR,
       PROP.OCCUP_TYPE_DESC, 
       CR_SCR.CR_SCR_VAL,
       CASE 
              WHEN LM_MOD.LOAN_KEY IS NOT NULL 
              THEN 'Y'
              ELSE 'N'
       END AS MOD_IND
       --CASE
       --       WHEN MTG_INST_TYPE.CLS_CD_VAL LIKE '%ARM%'
       --       THEN 'ARM'
       --       ELSE 'FIXED'
       --END AS MTG_TYPE
   ,CASE
              WHEN LOAN.UPB_AMT > 0 
              THEN 'Active'
              ELSE 'Inactive'
       END [Loan Status]
FROM dbo.LOAN (NOLOCK)
INNER JOIN dbo.LOAN_NBR_CROSS_REF XREF (NOLOCK) ON LOAN.LOAN_KEY = XREF.LOAN_KEY
INNER JOIN (
   SELECT 
    MLSTN.LOAN_KEY,
    MLSTN.MLSTN_TYPE_NM,
    MLSTN.MLSTN_DTTM,
    ROW_NUMBER() OVER(PARTITION BY MLSTN.LOAN_KEY ORDER BY MLSTN.MLSTN_DTTM DESC) AS LST_MLSTN      
   FROM dbo.LOAN_MLSTN_DT MLSTN WITH (NOLOCK)
   ) LOAN_MLSTN_DT 
 ON XREF.LOAN_KEY = LOAN_MLSTN_DT.LOAN_KEY 
 AND LOAN_MLSTN_DT.LST_MLSTN = 1
INNER JOIN dbo.LOAN_BAL (NOLOCK) ON LOAN_BAL.LOAN_KEY = LOAN.LOAN_KEY
INNER JOIN dbo.LOAN_EXT LOAN_EXT (NOLOCK) ON LOAN.LOAN_KEY = LOAN_EXT.LOAN_KEY
LEFT JOIN dbo.LOAN_TYPE LT (NOLOCK) ON LT.LOAN_TYPE_CD = LOAN.LOAN_TYPE_CD AND LT.SOR_CD = LOAN.SOR_CD
INNER JOIN dbo.LOAN_DELQ LOAN_DELQ (NOLOCK) ON LOAN.LOAN_KEY = LOAN_DELQ.LOAN_KEY 
INNER JOIN dbo.INVSTR INV (NOLOCK) ON INV.INVSTR_CD = LOAN.INVSTR_CD
INNER JOIN dbo.PROP PROP WITH (NOLOCK) ON LOAN.LOAN_KEY = PROP.LOAN_KEY 
LEFT JOIN dbo.ADDR ADDR WITH (NOLOCK) ON PROP.PROP_ADDR_ID = ADDR.ADDR_ID
--INNER JOIN dbo.LOAN_DELQ FOR SYSTEM_TIME AS OF @EOM_DT LD_H (NOLOCK) ON LOAN.LOAN_KEY = LD_H.LOAN_KEY

LEFT JOIN(SELECT  
       LOAN.LOAN_KEy,
       STS_HIST.ReportingCategory AS [REO Status]
       --ASST.[Status] AS REO_ASST_STS,
       --MIN(ChangeDt) AS MIN_Dt,
       --MAX(ChangeDt) AS MAX_DT,
       --COUNT(1)
FROM SRVC_WH.dbo.CLNDR CLNDR WITH (NOLOCK)
INNER JOIN STG_SRVC_WH.Recascade.Asset ASST (Nolock)
       ON CLNDR.CLNDR_DT = CAST(GETDATE() AS DATE) 
       AND ASST.ProductType = 'REO'
INNER JOIN (
                     SELECT
                           StatusHist.AssetID, 
                           StatusHist.ChangeDt,
                           StatusHist.NewStatus,
                           Status_Lookup.ReportingCategory,
                           ROW_NUMBER() OVER (PARTITION BY StatusHist.AssetID ORDER BY StatusHist.ChangeDt DESC ) AS RowNum
           FROM STG_SRVC_WH.Recascade.StatusHist StatusHist (Nolock) 
              INNER JOIN STG_SRVC_WH.Recascade.Status_lookup Status_Lookup (NOLOCK)
                     ON StatusHist.NewStatus = Status_Lookup.CascadeStatus
              ) STS_HIST
       ON ASST.AssetId = STS_HIST.AssetID
       AND STS_HIST.RowNum = 1
       AND CASE
                     WHEN STS_HIST.NewStatus LIKE '%Closed%' 
                     THEN STS_HIST.ChangeDt
                     WHEN STS_HIST.NewStatus LIKE '%Transferred%' 
                     THEN STS_HIST.ChangeDt
                     WHEN STS_HIST.NewStatus LIKE '%Sold%' 
                     THEN STS_HIST.ChangeDt
                     WHEN ASST.IsActive = 1
                     THEN GETDATE() 
                     ELSE '1950-01-01'
              END BETWEEN CLNDR.CLNDR_MTH_BEG_DT AND CLNDR_MTH_END_DT   
INNER JOIN SRVC_WH.dbo.LOAN_NBR_CROSS_REF XREF WITH (NOLOCK)
              ON XREF.LOAN_NBR = ASST.LoanNumber 
INNER JOIN SRVC_WH.dbo.LOAN LOAN WITH (NOLOCK)
              ON XREF.LOAN_KEY = LOAN.LOAN_KEY) REO ON REO.LOAN_KEY=LOAN.LOAN_KEY
LEFT OUTER JOIN (
                           SELECT
                                  CR.LOAN_KEY,
                                  CR.CR_SCR_VAL,
                                  RANK() OVER (PARTITION BY LOAN_KEY, BORR_PSTN_NBR ORDER BY CR_SCR_DT DESC) RNK 
                           FROM dbo.CR_SCR_HIST CR WITH (NOLOCK)
                           WHERE CR.BORR_PSTN_NBR = 1
                           ) CR_SCR
       ON LOAN.LOAN_KEy = CR_SCR.LOAN_KEY 
       AND CR_SCR.RNK = 1
LEFT OUTER JOIN (
                           SELECT 
                                  LOSSMIT_MOD_CMPLTD.LOAN_KEY,
                                  RANK() OVER (PARTITION BY LOAN_KEY ORDER BY LOSSMIT_MOD_CMPLTD.MOD_SQ_NBR DESC, LOSSMIT_MOD_CMPLTD.MOD_SUB_SQ_NBR DESC) AS RNK
                           FROM dbo.LOSSMIT_MOD_CMPLTD LOSSMIT_MOD_CMPLTD WITH (NOLOCK)
                           ) LM_MOD 
       ON LOAN.LOAN_KEY = LM_MOD.LOAN_KEY
       AND LM_MOD.RNK = 1   
LEFT OUTER JOIN dbo.CLS_CD MTG_INST_TYPE (NOLOCK)
       ON LOAN.MTG_INSMT = MTG_INST_TYPE.CLS_CD_VAL 
       AND MTG_INST_TYPE.CLS_CD_TYPE = 'MORT_INSTRUMNT'
WHERE LOAN.SOR_CD = 'LSM' 
AND  LOAN.LOAN_KEY IN   (4927699,3357925,4247928,5814824,4303380,7498958,6900783,1638141,5428117,4094398,3268434,7576851,5101884,3449315,5728313,1643674,7177136,7074263,6024476,7200502,5482446,4288949,6396763,1999037,4874506,1752181,7229833,6805209,5502681,4812254,6843404,6169888,4252628,4467773,5069167,1632306,1056962,2128264,5357519,7502088,6983871,6962188,4961218,3265843,1853020,7567595,7638774,1740208,6078085,7175009,2719580,7112976,6006556,6188067,4483869,3218504,3246007,1345966,7214752,5134075,7548643,7622031,6470278,4146391,7162089,4096070,4382578,6768711,2902277,1004632,7401310,3337850,7116373,7141277,1993664,6521494,6577030,6896409,2174499,4939608,7376648,7194062,4177235,1912480,7478485,4025166,2513517,6772794,6317252,4066728,4401560,5896641,7171664,2728501,3850196,4313920,1492135,2703972,1770611,1772724,4783615,4042047,3710199,4283488,6010332,6755621,4978619,2860146,4495405,6978098,5896000,5741481,7567294,3233181,6052099,7173067,5997110,7143237,5065256,7380813,2121428,6604782,2716543,3917486,1266828,1246820,7412893,3644384,3161964,3655311,7408347,3519111,6097451,5471732,2765944,2530957,6580250,1907071,4183444,2013254,4666200,5776363,7662372,2886027,4378023,6799652,6946459,7162718,4027308,1736598,6947602,3683871,1516986,7643433,4742284,6631946,7019342,4518750,1881029,1566011,2842892,3268776,1493897,6122402,4572566,7671238,8046320,4945442,7371521,6851462,3121561,6158525,1746106,2366576,7615086,7074204,4522895,7672469,4412931,3747247,7130226,3340709,2689580,5375640,7427489,6087957,3877778,6477494,6086489,3063824,7140612,6798546,3507769,7394608,2365705,7182401,7360121,3381874,5738383,5126873,5903704,6034903,7494107,4585946,7595899,7014926,4438462,2203969,5108826,3383767,3476365,3906590,6664524,7169698,2476391,7146659,7213962,2734009,6621306,4535615,4927868,7645300,1469963,4836562,6368346,2214458,6787840,3724415,3143934,1749738,7495574,4956287,5800546,6912586,7622833,3712009,6688593,4784869,2277985,4735628,3870703,7655543,4321941,6854313,3621126,1526411,3667345,7450737,2241238,7562644,2773363,1497323,1902271,7194525,3157327,6046084,2439210,6520729,5635055,1914882,5432568,2459078,6979035,7363845,2216670,1850810,4976445,7649331,6895532,1743551,3279489,2177035,5519280,2693041,7624612,8028690,6381369,7589074,3141512,6180494,4820252,1194786,1730127,4386950,6447639,2176614,2592047,2013317,6978667,2653927,4262739,2527447,4194899,5921003,5030026,7511689,1893421,7470135,1912722,6427555,1482062,6845644,7414533,1785263,5925214,4268746,4474246,2310828,2267308,7374703,5092152,4208752,6687696,5504994,1334531,5418790,6224096,5829659,7385368,3498626,5755521,1829627,3864396,7557779,3380298,3117835,7198810,7344024,7676948,5495765,4872906,4959739,7040222,6956430,5066630,2934291,6976919,5462098,6133042,6111131,6569336,5637492,3370350,3367202,6146387,5388064,7199963,2406599,7553418,5885729,1229279,2037657,5894935,6978444,4447994,5141144,7129371,7166662,6383422,6016903,4905837,5466465,5045346,3400286,4967068,7612265,6368509,4326423,3697014,6128351,5910046,1256075,1786711,2703547,4496206,7119822,3692649,3711099,6605710,4569596,6496863,7631779,5919225,3681960,7498845,4061737,3358341,4312341,5351411,5888371,6805561,2610090,7134933,7635562,5030934,7611096,1528143,4188385,2697940,5423907,5802279,3933534,4726689,5827307,1624557,7417318,4442721,3142757,6046763,7173965,4855004,6586209,6166202,7191621,3502631,7642555,4607995,7180023,5372469,5083535,2883360,6479849,6617423,1775964,7109663,3642412,1517906,1665611,5076245,5981619,2950585,3577954,7622563,6581635,6182837,6979227,4160685,2682162,6104301,1794984,5037211,5143975,7034996,6424084,6667513,5863268,1669775,5003375,5786924,6864050,7411948,6572961,6381676)
order by LOAN_KEY desc


============
Payment_table_code


SELECT  distinct *
FROM
(
SELECT 
               LOAN.LOAN_KEY
              ,CONVERT(VARCHAR(8),LOAN_TXN.TXN_DT,112) TXN_DateKey
              ,SRC_OF_FUND
              ,PRIN_PYMT_AMT
              ,INT_PYMT_AMT
              ,TOT_ESCRW_PYMT_AMT
              ,FEE.TXN_SQ_NBR Trn#
              ,LOAN_TXN.TXN_DT Posted_Date
              ,LOAN_TXN.TXN_EFF_DT AS Effective_Date
              ,LOAN_TXN.BAT_NBR Batch
              ,LOAN_TXN.FB_DUE_DT AS Due_Date
              ,LOAN_TXN.TXN_TYPE_CD Transaction_Type
              ,LOAN_TXN.OVRD_CD Override_Code
              ,SRVC_FEE_CD1
              ,LOAN_TXN.RVRS_CD
               , CASE 
                 WHEN SRC_OF_FUND IN ('LB','LE') THEN 'Lockbox'
                 --WHEN SRC_OF_FUND = 'SP' THEN 'SPEEDPAY'
                 --WHEN SRC_OF_FUND = 'LE' THEN 'ELECTRONIC LOCKBOX'
                 --WHEN SRC_OF_FUND = 'MG' THEN 'MONEYGRAM'
                 WHEN SRC_OF_FUND = 'WB' THEN 'Web'
                 --WHEN SRC_OF_FUND = 'WU' THEN 'WESTERN UNION'
                 --WHEN SRC_OF_FUND = 'CK' THEN 'CHECK'
                 --WHEN SRC_OF_FUND = 'IV' THEN 'IVR'
                 WHEN SRC_OF_FUND = 'BA' THEN 'ACH'
                 --WHEN SRC_OF_FUND = 'WR' THEN 'WIRE'
                 --WHEN SRC_OF_FUND = 'EA' THEN 'EQUITY ACCELERATOR' 
              ELSE 'Other'
              END [Payment Source],LOAN.INVSTR_CD
	  			
              
              ,CASE WHEN FEE.SRVC_FEE_CD1 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT1 *-1
                       WHEN FEE.SRVC_FEE_CD1 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT1 
                       WHEN FEE.SRVC_FEE_CD1 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT1
                       WHEN FEE.SRVC_FEE_CD1 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT1)
                       WHEN FEE.SRVC_FEE_CD1 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT1)
                       ELSE 0 END Additional_Amount1
              ,FEE.SRVC_FEE_CD1 Additional_Code1
              ,CASE WHEN FEE.SRVC_FEE_CD2 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT2 *-1
                       WHEN FEE.SRVC_FEE_CD2 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT2 
                       WHEN FEE.SRVC_FEE_CD2 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT2
                       WHEN FEE.SRVC_FEE_CD2 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT2)
                       WHEN FEE.SRVC_FEE_CD2 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT2)
                       ELSE 0 END Additional_Amount2
              ,FEE.SRVC_FEE_CD2 Additional_Code2
              ,CASE WHEN FEE.SRVC_FEE_CD3 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT3 *-1
                       WHEN FEE.SRVC_FEE_CD3 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT3 
                       WHEN FEE.SRVC_FEE_CD3 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT3
                       WHEN FEE.SRVC_FEE_CD3 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT3)
                       WHEN FEE.SRVC_FEE_CD3 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT3)
                       ELSE 0 END Additional_Amount3
              ,FEE.SRVC_FEE_CD3 Additional_Code3
              ,CASE WHEN FEE.SRVC_FEE_CD4 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT4 *-1
                       WHEN FEE.SRVC_FEE_CD4 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT4
                       WHEN FEE.SRVC_FEE_CD4 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT4
                       WHEN FEE.SRVC_FEE_CD4 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT4)
                       WHEN FEE.SRVC_FEE_CD4 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT4) 
                       ELSE 0 END Additional_Amount4
              ,FEE.SRVC_FEE_CD4 Additional_Code4
              ,CASE WHEN FEE.SRVC_FEE_CD5 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT5 *-1
                       WHEN FEE.SRVC_FEE_CD5 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT5 
                       WHEN FEE.SRVC_FEE_CD5 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT5
                       WHEN FEE.SRVC_FEE_CD5 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT5)
                       WHEN FEE.SRVC_FEE_CD5 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT5)
                       ELSE 0 END Additional_Amount5
              ,FEE.SRVC_FEE_CD5 Additional_Code5
              ,CASE WHEN FEE.SRVC_FEE_CD6 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT6 *-1
                       WHEN FEE.SRVC_FEE_CD6 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT6 
                       WHEN FEE.SRVC_FEE_CD6 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT6
                       WHEN FEE.SRVC_FEE_CD6 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT6)
                       WHEN FEE.SRVC_FEE_CD6 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT6)
                       ELSE 0 END Additional_Amount6
              ,FEE.SRVC_FEE_CD6 Additional_Code6
              ,CASE WHEN FEE.SRVC_FEE_CD7 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT7 *-1
                       WHEN FEE.SRVC_FEE_CD7 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT7 
                       WHEN FEE.SRVC_FEE_CD7 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT7
                       WHEN FEE.SRVC_FEE_CD7 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT7)
                       WHEN FEE.SRVC_FEE_CD7 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT7)
                       ELSE 0 END Additional_Amount7
              ,FEE.SRVC_FEE_CD7 Additional_Code7
              ,CASE WHEN FEE.SRVC_FEE_CD8 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT8 *-1
                       WHEN FEE.SRVC_FEE_CD8 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT8 
                       WHEN FEE.SRVC_FEE_CD8 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT8
                       WHEN FEE.SRVC_FEE_CD8 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT8)
                       WHEN FEE.SRVC_FEE_CD8 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT8)
                       ELSE 0 END Additional_Amount8
              ,FEE.SRVC_FEE_CD8 Additional_Code8
              ,CASE WHEN FEE.SRVC_FEE_CD9 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT9 *-1
                       WHEN FEE.SRVC_FEE_CD9 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT9 
                       WHEN FEE.SRVC_FEE_CD9 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT9
                       WHEN FEE.SRVC_FEE_CD9 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT9)
                       WHEN FEE.SRVC_FEE_CD9 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT9)
                       ELSE 0 END Additional_Amount9
              ,FEE.SRVC_FEE_CD9 Additional_Code9
              ,CASE WHEN FEE.SRVC_FEE_CD10 = '01' AND LOAN_TXN.TXN_TYPE_CD = '14' AND LOAN_TXN.OVRD_CD in ('01','00') THEN FEE.SRVC_FEE_AMT10 *-1
                       WHEN FEE.SRVC_FEE_CD10 = '01' AND TXN_TYPE_CD IN ('14','25','26') AND OVRD_CD IN ('99','64') THEN FEE.SRVC_FEE_AMT10 
                       WHEN FEE.SRVC_FEE_CD10 = '01' AND TXN_TYPE_CD IN ('25','26') THEN FEE.SRVC_FEE_AMT10
                       WHEN FEE.SRVC_FEE_CD10 = '01' AND TXN_TYPE_CD = '33' THEN ABS(FEE.SRVC_FEE_AMT10)
                       WHEN FEE.SRVC_FEE_CD10 = '01' AND TXN_TYPE_CD IN ('91','92','93') THEN ABS(FEE.SRVC_FEE_AMT10)
                       ELSE 0 END Additional_Amount10
              ,FEE.SRVC_FEE_CD10 Additional_Code10
              --,ETFBDT
              ,CATEGORY = 	CASE WHEN TXN_TYPE_CD IN ('91','92','93','33') THEN 'REVERSAL'
                               WHEN TXN_TYPE_CD = '14' AND OVRD_CD in ('00','01') THEN 'PAYMENT'
                               WHEN TXN_TYPE_CD IN ('25','26') THEN 'WAIVER' 
                               WHEN TXN_TYPE_CD = '14' AND OVRD_CD = '99' THEN 'ASSESSMENT' END
FROM dbo.LOAN LOAN WITH (NOLOCK)    
INNER JOIN dbo.LOAN_TXN LOAN_TXN WITH (NOLOCK)
      ON LOAN.LOAN_KEY = LOAN_TXN.LOAN_KEY 
left join [SRVC_WH].[dbo].[LOAN_TXN_FEE] FEE 
	  ON LOAN_TXN.LOAN_KEY = FEE.LOAN_KEY and LOAN_TXN.TXN_SQ_NBR = FEE.TXN_SQ_NBR 
					
 where    LOAN.UPB_AMT > 0 
--   and LOAN_TXN.TXN_TYPE_CD IN('01','02') 
      AND LOAN_TXN.TXN_DT BETWEEN DATEADD( MONTH, DATEDIFF( MONTH, 0, GETDATE()) - 5, 0) AND GETDATE()
       )A where

LOAN_KEY IN   (3357925,4247928,5814824,4303380,7498958,6900783,1638141,5428117,4094398,3268434,7576851,5101884,3449315,5728313,1643674,7177136,7074263,
6024476,7200502,5482446,4288949,6396763,1999037,4874506,1752181,7229833,6805209,5502681,4812254,6843404,6169888,4252628,4467773,5069167,1632306,1056962,2128264,
5357519,7502088,6983871,6962188,4961218,3265843,1853020,7567595,7638774,1740208,6078085,7175009,2719580,7112976,6006556,6188067,4483869,3218504,3246007,1345966,
7214752,5134075,7548643,7622031,6470278,4146391,7162089,4096070,4382578,6768711,2902277,1004632,7401310,3337850,7116373,7141277,1993664,6521494,6577030,6896409,
2174499,4939608,7376648,7194062,4177235,1912480,7478485,4025166,2513517,6772794,6317252,4066728,4401560,5896641,7171664,2728501,3850196,4313920,1492135,2703972,
1770611,1772724,4783615,4042047,3710199,4283488,6010332,6755621,4978619,2860146,4495405,6978098,5896000,5741481,7567294,3233181,6052099,7173067,5997110,7143237,5065256,
7380813,2121428,6604782,2716543,3917486,1266828,1246820,7412893,3644384,3161964,3655311,7408347,3519111,6097451,5471732,2765944,2530957,6580250,1907071,4183444,2013254,
4666200,5776363,7662372,2886027,4378023,6799652,6946459,7162718,4027308,1736598,6947602,3683871,1516986,7643433,4742284,6631946,7019342,4518750,1881029,1566011,2842892,
3268776,1493897,6122402,4572566,7671238,8046320,4945442,7371521,6851462,3121561,6158525,1746106,2366576,7615086,7074204,4522895,7672469,4412931,3747247,7130226,3340709,2689580,
5375640,7427489,6087957,3877778,6477494,6086489,3063824,7140612,6798546,3507769,7394608,2365705,7182401,7360121,3381874,5738383,5126873,5903704,6034903,7494107,4585946,7595899,
7014926,4438462,2203969,5108826,3383767,3476365,3906590,6664524,7169698,2476391,7146659,7213962,2734009,6621306,4535615,4927868,7645300,1469963,4836562,6368346,2214458,6787840,
3724415,3143934,1749738,7495574,4956287,5800546,6912586,7622833,3712009,6688593,4784869,2277985,4735628,3870703,7655543,4321941,6854313,3621126,1526411,3667345,7450737,2241238,
7562644,2773363,1497323,1902271,7194525,3157327,6046084,2439210,6520729,5635055,1914882,5432568,2459078,6979035,7363845,2216670,1850810,4976445,7649331,6895532,1743551,3279489
,2177035,5519280,2693041,7624612,8028690,6381369,7589074,3141512,6180494,4820252,1194786,1730127,4386950,6447639,2176614,2592047,2013317,6978667,2653927,4262739,2527447,4194899,
5921003,5030026,7511689,1893421,7470135,1912722,6427555,1482062,6845644,7414533,1785263,5925214,4268746,4474246,2310828,2267308,7374703,5092152,4208752,6687696,5504994,1334531,
5418790,6224096,5829659,7385368,3498626,5755521,1829627,3864396,7557779,3380298,3117835,7198810,7344024,7676948,5495765,4872906,4959739,7040222,6956430,5066630,2934291,6976919,
5462098,6133042,6111131,6569336,5637492,3370350,3367202,6146387,5388064,7199963,2406599,7553418,5885729,1229279,2037657,5894935,6978444,4447994,5141144,7129371,7166662,6383422,
6016903,4905837,5466465,5045346,3400286,4967068,7612265,6368509,4326423,3697014,6128351,5910046,1256075,1786711,2703547,4496206,7119822,3692649,3711099,6605710,4569596,6496863,
7631779,5919225,3681960,7498845,4061737,3358341,4312341,5351411,5888371,6805561,2610090,7134933,7635562,5030934,7611096,1528143,4188385,2697940,5423907,5802279,3933534,4726689,
5827307,1624557,7417318,4442721,3142757,6046763,7173965,4855004,6586209,6166202,7191621,3502631,7642555,4607995,7180023,5372469,5083535,2883360,6479849,6617423,1775964,7109663,
3642412,1517906,1665611,5076245,5981619,2950585,3577954,7622563,6581635,6182837,6979227,4160685,2682162,6104301,1794984,5037211,5143975,7034996,6424084,6667513,5863268,1669775,
5003375,5786924,6864050,7411948,6572961,6381676)
